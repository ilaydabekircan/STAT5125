---
title: "STAT5125 Project"
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

```{r, warning = FALSE, message = FALSE}
library(rvest)     
library(tidyverse)
library(janitor)
```

```{r}
html1 <- read_html("https://en.wikipedia.org/wiki/List_of_United_States_cities_by_population") 
web1 <- html_table(html1)
target <- web1[[3]] |>
  data.frame() |>
  slice(-1) |>
  clean_names() |>
  mutate(city = str_remove(city, "\\[.\\]")) |>
  rename_with(~str_remove(., "^x"), starts_with("x")) |>
  select(-starts_with("2022"),
         -change,
         -location) |>
  rename(land_area_mi2 = '2020_land_area',
         land_area_km2 = '2020_land_area_1',
         population = '2020census',
         density_mi2 = '2020_density',
         density_km2 = '2020_density_1',
         state_code = st) |>
  mutate(across(everything(), ~ str_replace_all(., ",", ""))) |>
  mutate_at(c("population", "land_area_mi2", "land_area_km2", "density_mi2", "density_km2"), as.numeric) |>
  select(-land_area_mi2,
         -density_mi2,
         -density_km2)

target
```

```{r}
# https://public.opendatasoft.com/explore/dataset/us-cities-demographics/table/?flg=en-us

csv1 <- read.csv("/Users/ilaydabekircan/Documents/SPRING'23/STAT5125/Project/us-cities-demographics.csv", sep = ";")

features2 <- csv1 |>
  clean_names() |>
  pivot_wider(names_from = race,
              values_from = count) |>
  clean_names() |>
  rename(american = american_indian_and_alaska_native,
         hispanic = hispanic_or_latino,
         black = black_or_african_american,
         male = male_population,
         female = female_population) |>
  mutate(male = round(male/(male+female),4),
         female = 1-male) |>
  mutate(white = white/(white + american + hispanic + black + asian),
         american = american/(white + american + hispanic + black + asian),
         hispanic = hispanic/(white+american+hispanic+black+asian),
         black = black/(white + american + hispanic + black + asian),
         asian = asian/(white + american + hispanic + black + asian)) |>
  mutate(perc_veterans = number_of_veterans / total_population,
         perc_foreign_born = foreign_born / total_population) |>
  select(-total_population,
         -number_of_veterans,
         -foreign_born)

features2
```

```{r}
# https://www.kaggle.com/datasets/denissad/us-cities

csv2 <- read.csv("/Users/ilaydabekircan/Documents/SPRING'23/STAT5125/Project/us_cities.csv")
features3 <- csv2 |>
  clean_names() |>
  select(-x,
         -latitude,
         -longitude) |>
  mutate(region = as.factor(region),
         size = as.factor(size),
         avg_rent = as.double(avg_rent)) |>
  select(-population,
         -bike_score,
         -walk_score) # more than 75% of null values for bike_score and walk_score

features3
```

```{r}
# https://www.kaggle.com/datasets/polartech/number-of-houses-on-sale-in-all-cities-in-the-us

csv3 <- read.csv("/Users/ilaydabekircan/Documents/SPRING'23/STAT5125/Project/estate of city.csv")

features4 <- csv3 |>
  clean_names() |>
  select(-count)

features4
```

```{r}
trial1 <- target |>
  left_join(features2,
             by = c("city", "state_code")) |>
  left_join(features4,
            by = c("city"))

trial1

trial2 <- target |>
  left_join(features2,
             by = c("city", "state_code")) |>
  left_join(features3,
             by = c("city", "state")) |>  
  left_join(features4,
            by = c("city"))

trial2
```

```{r}
library(naniar)
vis_miss(trial1)
vis_miss(trial2)
```

```{r}
#imputation based on KNN
library(VIM)
trial1 <- select(trial1, -c(city, state_code, state))
trial1 |> miss_var_summary()

knn_impute_t1 <- trial1 |>
 nabular(only_miss = TRUE) |>
 kNN(variable = c("land_area_km2" ,"median_age", "male", "female", "average_household_size", "white", "american", "hispanic", "black", "asian", "perc_veterans", "perc_foreign_born", "avg_price"),
     dist_var = c("land_area_km2" ,"median_age", "male", "female", "average_household_size", "white", "american", "hispanic", "black", "asian", "perc_veterans", "perc_foreign_born", "avg_price"))

knn_impute_t1 <- knn_impute_t1 |> 
  select(-ends_with("NA"),
         -ends_with("imp"))

knn_impute_t1 |> miss_var_summary()
knn_impute_t1
```

```{r}
#imputation based on KNN
trial2 <- select(trial2, -c(city, state_code, state))
trial2 |> miss_var_summary()

knn_impute_t2 <- trial2 |>
 nabular(only_miss = TRUE) |>
 kNN(variable = c("population", "land_area_km2", "median_age", "male", "female", "average_household_size", "white", "american", "hispanic", "black", "asian", "perc_veterans", "perc_foreign_born", "region", "size", "avg_rent", "median_rent", "unemp_rate", "avg_income", "cost_of_living", "price_parity", "commute_time", "median_aqi", "transit_score", "avg_price"),
     dist_var = c("population", "land_area_km2", "median_age", "male", "female", "average_household_size", "white", "american", "hispanic", "black", "asian", "perc_veterans", "perc_foreign_born", "region", "size", "avg_rent", "median_rent", "unemp_rate", "avg_income", "cost_of_living", "price_parity", "commute_time", "median_aqi", "transit_score", "avg_price"))

knn_impute_t2 <- knn_impute_t2 |> 
  select(-ends_with("NA"),
         -ends_with("imp"))

knn_impute_t2 |> miss_var_summary()
knn_impute_t2
```

```{r}
library(tidymodels)
library(tidyverse)

set.seed(3) 
pop_split <- initial_split(knn_impute_t1,
                           prop = 0.9, 
                           strata = population)
pop_train <- pop_split |>
 training()
pop_test <- pop_split |>
 testing()
```

```{r}
# trial 2
set.seed(3)
pop_split2 <- initial_split(knn_impute_t2, 
                            prop = 0.9, 
                            strata = population)
pop_train_2 <- pop_split2 |>
 training()
pop_test_2 <- pop_split2 |>
 testing()
```

```{r}
# model 1 (linear regression)

population_parsnip_1 <- linear_reg() |> 
  set_mode("regression") |>
  set_engine("lm")

population_workflow_1 <- workflow() |>
  add_model(population_parsnip_1) |>
  add_formula(population ~ .)
 
# model 2 (linear regression with PCA)
population_recipe_2 <- recipe(population ~ .,
                              data = pop_train) |>
  step_normalize(all_numeric_predictors()) |>
  step_pca(all_numeric_predictors(), num_comp = 3) |>
  step_dummy(all_nominal_predictors()) 

population_recipe_2_2 <- recipe(population ~ .,
                                data = pop_train_2) |>
  step_normalize(all_numeric_predictors()) |>
  step_pca(all_numeric_predictors(), num_comp = 3) |>
  step_dummy(all_nominal_predictors()) 

population_workflow_2 <- workflow() |>
  add_model(population_parsnip_1) |>
  add_recipe(population_recipe_2)

population_workflow_2_2 <- workflow() |>
  add_model(population_parsnip_1) |>
  add_recipe(population_recipe_2_2)

# model 3 (linear regression with penalty 0.5)
population_recipe_3 <- recipe(population ~ .,
                       data = pop_train) |>
  step_normalize(all_numeric_predictors()) |>
  step_pca(all_numeric_predictors(), num_comp = 30) |>
  step_dummy(all_nominal_predictors()) 

population_recipe_3_2 <- recipe(population ~ .,
                         data = pop_train_2) |>
  step_normalize(all_numeric_predictors()) |>
  step_pca(all_numeric_predictors(), num_comp = 30) |>
  step_dummy(all_nominal_predictors()) 

population_parsnip_3 <- linear_reg(penalty = 0.5) |> 
  set_mode("regression") |>
  set_engine("glmnet")
 
population_workflow_3 <- workflow() |>
 add_model(population_parsnip_3) |>
 add_recipe(population_recipe_3)

population_workflow_3_2 <- workflow() |>
 add_model(population_parsnip_3) |>
 add_recipe(population_recipe_3_2)

# model 4 (kknn with 5 neighbors)

library(kknn)
population_parsnip_4 <- nearest_neighbor() |> 
  set_mode("regression") |>
  set_engine("kknn", neighbors = 5)

population_workflow_4 <- workflow() |>
 add_model(population_parsnip_4) |>
 add_formula(population ~ .)
 
#model 5
library(ranger)
population_parsnip_5 <- rand_forest() |> 
  set_mode("regression") |>
  set_engine("ranger")

population_workflow_5<- workflow() |>
  add_model(population_parsnip_5) |>
  add_formula(population ~ .)

```

```{r}
workflow_names <- c("lm", 
                    "lm_PCA",
                    "lm_PCA_lasso",
                    "knn",
                    "rf")

workflow_objects <- list(population_workflow_1,
                         population_workflow_2,
                         population_workflow_3,
                         population_workflow_4,
                         population_workflow_5)

workflow_objects_2 <- list(population_workflow_1,
                           population_workflow_2_2,
                           population_workflow_3_2,
                           population_workflow_4,
                           population_workflow_5)


workflows_tbl <- tibble(work_names = workflow_names,
                        work_objects = workflow_objects)
workflows_tbl

workflows_tbl_2 <- tibble(work_names = workflow_names,
                          work_objects = workflow_objects_2)
workflows_tbl_2
 
set.seed(1)
workflows_tbl <- workflows_tbl |>
  rowwise() |>
  mutate(fits = list(fit(work_objects,pop_train))) |>
  mutate(predictions = list(predict(fits, pop_test)))
workflows_tbl
 
set.seed(1)
workflows_tbl_2 <- workflows_tbl_2 |>
  rowwise() |>
  mutate(fits = list(fit(work_objects, pop_train_2))) |>
  mutate(predictions = list(predict(fits, pop_test_2)))
workflows_tbl_2
```

```{r}
#check the performance 
predictions_tbl  <- workflows_tbl |>
 select(work_names, 
        predictions) |>
 unnest(predictions) |>
 cbind(population = pop_test |>
         pull(population))
predictions_tbl

predictions_tbl_2  <- workflows_tbl_2 |>
 select(work_names, 
        predictions) |>
 unnest(predictions) |>
 cbind(population = pop_test |>
         pull(population))
predictions_tbl_2
```

```{r}
predictions_tbl |>
  ggplot(aes(x = population, 
             y = .pred)) +
  geom_point(alpha = 0.2) +
  facet_wrap(~work_names, nrow = 2) +
  geom_abline(slope = 1, linetype = "dotted", color = "red") +
  xlab("Actual") +
  ylab("Prediction") +
  coord_obs_pred() + 
  theme_bw()

predictions_tbl_2 |>
  ggplot(aes(x = population, 
             y = .pred)) +
  geom_point(alpha = 0.2) +
  facet_wrap(~work_names, nrow = 2) +
  geom_abline(slope = 1, linetype = "dotted", color = "red") +
  xlab("Actual") +
  ylab("Prediction") +
  coord_obs_pred() + 
  theme_bw()

```

```{r}
#Check the performance
population_metrics <- metric_set(yardstick::rmse, 
                                 rsq, 
                                 yardstick::mae)

options(scipen = 50)
predictions_metrics <- predictions_tbl |>
  group_by(work_names) |>
  population_metrics(truth = population, 
                     estimate = .pred) |>
  mutate(.estimate = (round(.estimate, 2))) |>
  mutate(data_set = 1)

predictions_metrics_2 <- predictions_tbl_2 |>
  group_by(work_names) |>
  population_metrics(truth = population, 
                     estimate = .pred) |>
  mutate(.estimate = (round(.estimate, 2))) |>
  mutate(data_set = 2)

predictions <- predictions_metrics |>
  full_join(predictions_metrics_2,
             by = c("work_names", ".metric", ".estimator", "data_set", ".estimate")) |>
  mutate(data_set = as.factor(data_set))

predictions_metrics
predictions_metrics_2
predictions
```

```{r}
# YOUR CODE HERE
predictions |>
  ggplot(aes(y = work_names,
             fill = data_set,
             x = .estimate)) +
  geom_col(position = "dodge") +
  facet_wrap(~.metric,
             scales = "free_x") + 
  theme_bw() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1),
        legend.position = "top") +
  ylab("Model") +
  xlab("Performance Estimate")
```
